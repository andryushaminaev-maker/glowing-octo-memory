
import logging
import sqlite3
from datetime import datetime
import re
import pandas as pd

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO)
DB_FILE = "reports.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        vehicle TEXT,
        start_time TEXT,
        end_time TEXT,
        work_hours REAL,
        overtime REAL,
        total_km REAL,
        km_mkad REAL
    )
    """)
    conn.commit()
    conn.close()

DATE_PATTERN = re.compile(r"(\d{2}\.\d{2}\.\d{4})")
VEHICLE_PATTERN = re.compile(r"(?:–¢–°|–°–º–µ–Ω–∞|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–°)\s+([^\n]+)")
START_PATTERN = re.compile(r"(?:–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã|–ù–∞—á–∞–ª–æ)\s+(\d{2}:\d{2})")
END_PATTERN = re.compile(r"(?:–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã|–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã|–û–∫–æ–Ω—á–∞–Ω–∏–µ)\s+(\d{2}:\d{2})")
OVERTIME_PATTERN = re.compile(r"(?:–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞|–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏)\s+(\d+)(?:\s*(\d+))?")
KM_PATTERN = re.compile(r"(?:–û–±—â–∏–π –ø—Ä–æ–±–µ–≥|–ü—Ä–æ–±–µ–≥ –æ–±—â–∏–π)\s+(\d+)")
KM_MKAD_PATTERN = re.compile(r"(?:–ü—Ä–æ–±–µ–≥ –∑–∞ –ú–ö–ê–î)\s+(\d+)")

def parse_report(report_text: str):
    try:
        date_match = DATE_PATTERN.search(report_text)
        if not date_match:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞"
        report_date = datetime.strptime(date_match.group(1), "%d.%m.%Y").date()
        vehicle_match = VEHICLE_PATTERN.search(report_text)
        if not vehicle_match:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–°"
        vehicle = vehicle_match.group(1).strip()
        start_match = START_PATTERN.search(report_text)
        if not start_match:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"
        start_time = datetime.strptime(start_match.group(1), "%H:%M").time()
        end_match = END_PATTERN.search(report_text)
        if not end_match:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"
        end_time = datetime.strptime(end_match.group(1), "%H:%M").time()
        overtime_match = OVERTIME_PATTERN.search(report_text)
        if not overtime_match:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞"
        hours = float(overtime_match.group(1))
        minutes = float(overtime_match.group(2)) if overtime_match.group(2) else 0
        overtime = hours + minutes / 60
        km_match = KM_PATTERN.search(report_text)
        if not km_match:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—â–∏–π –ø—Ä–æ–±–µ–≥"
        total_km = float(km_match.group(1))
        km_mkad_match = KM_MKAD_PATTERN.search(report_text)
        km_mkad = float(km_mkad_match.group(1)) if km_mkad_match else 0
        start_dt = datetime.combine(report_date, start_time)
        end_dt = datetime.combine(report_date, end_time)
        work_hours = (end_dt - start_dt).total_seconds() / 3600
        return {
            "date": str(report_date),
            "vehicle": vehicle,
            "start_time": str(start_time),
            "end_time": str(end_time),
            "work_hours": work_hours,
            "overtime": overtime,
            "total_km": total_km,
            "km_mkad": km_mkad
        }, None
    except Exception as e:
        return None, str(e)

def save_report(report_data):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO reports (date, vehicle, start_time, end_time, work_hours, overtime, total_km, km_mkad)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        report_data["date"],
        report_data["vehicle"],
        report_data["start_time"],
        report_data["end_time"],
        report_data["work_hours"],
        report_data["overtime"],
        report_data["total_km"],
        report_data["km_mkad"],
    ))
    conn.commit()
    conn.close()

def format_report(report):
    return (
        f"üìÖ –î–∞—Ç–∞: {report['date']}\n"
        f"üöò –ú–∞—à–∏–Ω–∞: {report['vehicle']}\n"
        f"‚è∞ –°–º–µ–Ω–∞: {report['start_time']} - {report['end_time']}\n"
        f"‚è≤Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {report['work_hours']:.2f} —á\n"
        f"‚ö°Ô∏è –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {report['overtime']:.2f} —á\n"
        f"üõ£ –ü—Ä–æ–±–µ–≥: {report['total_km']} –∫–º (–∑–∞ –ú–ö–ê–î {report['km_mkad']} –∫–º)"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç üìù", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç—á—ë—Ç –≤–æ–¥–∏—Ç–µ–ª—è.", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    report, error = parse_report(text)
    if error:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}")
    else:
        save_report(report)
        await update.message.reply_text("‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n" + format_report(report))

def main():
    init_db()
    app = Application.builder().token("YOUR_TELEGRAM_BOT_TOKEN").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
